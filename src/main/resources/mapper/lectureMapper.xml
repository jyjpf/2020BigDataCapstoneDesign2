<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dictation.mapper.LectureMapper"> 
	
		<select id="get" parameterType="Map" resultType="LectureVO">

		SELECT
			YEAR,
			TERM,
			LECTURE_NO,
			LECTURE_NM,
			SCHOOL_CD,
			GRADE,
			BAN,
			ENROLL_ST_DT,
			ENROLL_ED_DT,
			MAX_CNT,
			TEACHER_ID,
			TEACHER_NM
		FROM
			LECTURE
		WHERE 1=1
			AND LECTURE_NO = #{lecture_no}
			AND SCHOOL_CD = #{school_cd}

	</select>

	<select id="list" parameterType="Map" resultType="LectureVO">

		SELECT
			YEAR,
			TERM,
			LECTURE_NO,
			LECTURE_NM,
			SCHOOL_CD,
			GRADE,
			BAN,
			ENROLL_ST_DT,
			ENROLL_ED_DT,
			MAX_CNT,
			TEACHER_ID,	
			TEACHER_NM
		FROM
			LECTURE
		WHERE 1=1
			AND SCHOOL_CD = #{school_cd}

	</select> 

	<insert id="insert" parameterType="LectureVO">

		INSERT INTO LECTURE (
			YEAR,
			TERM,
			LECTURE_NO,
			LECTURE_NM,
			SCHOOL_CD,
			GRADE,
			BAN,
			ENROLL_ST_DT,
			ENROLL_ED_DT,
			MAX_CNT,
			TEACHER_ID,
			TEACHER_NM,		
			INPUT_ID,
			INPUT_DATE,
			UPDATE_ID,
			UPDATE_DATE
		) VALUES (
			'2020',
			'1',
			#{lecture_no},
			#{lecture_nm},
			#{school_cd},
			#{grade},
			#{ban},
			#{enroll_st_dt},
			#{enroll_ed_dt},
			#{max_cnt},
			#{teacher_id},
			#{teacher_nm},
			#{input_id},
			NOW(),
			#{input_id},
			NOW()
		)

	</insert>
 
	<delete id="delete" parameterType="String">

		DELETE FROM
			LECTURE
		WHERE 1=1
			AND LECTURE_NO = #{lecture_no}

	</delete>
 
	<!-- according to id Modifying Student Information-->
	<update id="update" parameterType="LectureVO">
		update lecture
		set
			year=(select year from term_cd where use_yn=1::VARCHAR),
			term=(select term from term_cd where use_yn=1::VARCHAR),
			lecture_nm=#{lecture_nm},
			school_cd=#{school_cd},
			grade=#{grade},
			ban=#{ban},
			enroll_st_dt=#{enroll_st_dt},
			enroll_ed_dt=#{enroll_ed_dt},
			max_cnt=#{max_cnt},
			teacher_id=#{teacher_id},
			teacher_nm=#{teacher_nm},
			update_id=#{teacher_id},
			update_date=now()::TIMESTAMP
			
		where
			lecture_no=#{lecture_no}
	</update>
	
	<!-- 선생님 본인이 개설한 강좌목록 띄우기 위한 코드 -->
	<select id="teacher_mylec" parameterType="String" resultType="LectureVO">
		select
			year,
			term,
			lecture_no,
			lecture_nm,
			school_cd,
			grade,
			ban,
			enroll_st_dt,
			enroll_ed_dt,
			max_cnt,
			teacher_id,
			teacher_nm,			
			input_id,
			input_date,
			update_id,
			update_date
		from
			lecture
		where
			teacher_id=#{user_id}
	</select>
	
	
	<!-- 학생화면 전체강좌 리스트에 강좌신청여부 -->
	<select id="student_lec_list" parameterType="String" resultType="LectureVO">
		select
			lec.year,
			lec.term,
			lec.lecture_no,
			lec.lecture_nm,
			lec.school_cd,
			lec.grade,
			lec.ban,
			lec.enroll_st_dt,
			lec.enroll_ed_dt,
			lec.max_cnt,
			lec.teacher_id,
			lec.teacher_nm,			
			lec.input_id,
			lec.input_date,
			lec.update_id,
			lec.update_date,
			en.approval_cd
		from
			lecture as lec
		left outer join
			(select approval_cd, lecture_no from enroll where user_id=#{user_id}) as en
		on
			en.lecture_no=lec.lecture_no
		
	</select>
	
	<!-- 학생 본인이 수강신청해서 승인된 강좌목록 띄우기 위한 코드 -->
	<select id="student_mylec" parameterType="String" resultType="LectureVO">

		select
			lec.year,
			lec.term,
			lec.lecture_no,
			lec.lecture_nm,
			lec.school_cd,
			lec.grade,
			lec.ban,
			lec.enroll_st_dt,
			lec.enroll_ed_dt,
			lec.max_cnt,
			lec.teacher_id,
			lec.teacher_nm,			
			lec.input_id,
			lec.input_date,
			lec.update_id,
			lec.update_date,
			en.approval_cd
		from
			lecture as lec
		right outer join
			(select approval_cd, lecture_no from enroll where user_id=#{user_id} and approval_cd='승인') as en
		on
			en.lecture_no=lec.lecture_no
				
	</select>

</mapper>

